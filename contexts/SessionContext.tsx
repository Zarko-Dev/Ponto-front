import React, { createContext, useContext, useState, ReactNode, useEffect } from 'react';
import sessionService, { WorkSession, TimeRecord } from '../src/services/sessionService';

interface SessionContextType {
  currentSession: WorkSession | null;
  sessions: WorkSession[];
  loading: boolean;
  startSession: () => Promise<boolean>;
  endSession: () => Promise<boolean>;
  refreshSessions: (force?: boolean) => Promise<void>;
  getTodayRecords: () => TimeRecord[];
  clearCurrentSession: () => void;
}

const SessionContext = createContext<SessionContextType | undefined>(undefined);

export function useSession() {
  const context = useContext(SessionContext);
  if (!context) {
    throw new Error('useSession deve ser usado dentro de um SessionProvider');
  }
  return context;
}

interface SessionProviderProps {
  children: ReactNode;
}

export function SessionProvider({ children }: SessionProviderProps) {
  const [currentSession, setCurrentSession] = useState<WorkSession | null>(null);
  const [sessions, setSessions] = useState<WorkSession[]>([]);
  const [loading, setLoading] = useState(false);
  const [lastRefresh, setLastRefresh] = useState<number>(0);

  // Carregar sess√µes do usu√°rio
  const refreshSessions = async (force: boolean = false) => {
    // Cache de 30 segundos para evitar chamadas excessivas
    const now = Date.now();
    const CACHE_DURATION = 30000; // 30 segundos
    
    if (!force && (now - lastRefresh) < CACHE_DURATION) {
      console.log('‚è∞ SessionContext: Cache ainda v√°lido, pulando atualiza√ß√£o');
      return;
    }
    
    try {
      console.log('üìä SessionContext: Carregando sess√µes...');
      setLoading(true);
      setLastRefresh(now);
      
      // Buscar sess√µes e sess√£o atual em paralelo
      const [userSessions, current] = await Promise.all([
        sessionService.getMySessions(),
        sessionService.getCurrentSession()
      ]);
      
      console.log('üì• SessionContext: Sess√µes carregadas:', userSessions.length);
      console.log('üéØ SessionContext: Sess√£o atual:', current ? `ID ${current.id}` : 'Nenhuma');
      
      setSessions(userSessions);
      setCurrentSession(current);
      
    } catch (error) {
      console.error('‚ùå SessionContext: Erro ao carregar sess√µes:', error);
      // Em caso de erro, limpar estado para evitar inconsist√™ncias
      setSessions([]);
      setCurrentSession(null);
    } finally {
      setLoading(false);
    }
  };

  // Iniciar nova sess√£o (Entrada)
  const startSession = async (): Promise<boolean> => {
    try {
      console.log('üöÄ SessionContext: Iniciando nova sess√£o...');
      setLoading(true);
      
      // Verificar se j√° existe sess√£o ativa
      if (currentSession) {
        console.log('‚ö†Ô∏è SessionContext: J√° existe sess√£o ativa');
        return false;
      }
      
      const newSession = await sessionService.startSession();
      console.log('‚úÖ SessionContext: Sess√£o iniciada:', newSession);
      
      // For√ßar atualiza√ß√£o imediata
      await refreshSessions(true);
      
      return true;
    } catch (error: any) {
      console.error('‚ùå SessionContext: Erro ao iniciar sess√£o:', error);
      
      // Se o erro √© "Sess√£o j√° iniciada", recarregar sess√µes para sincronizar o estado
      if (error.response?.status === 400 && error.response?.data?.code === 'SESSION_ALREADY_OPEN') {
        console.log('üîÑ SessionContext: Sess√£o j√° existe no servidor, sincronizando...');
        await refreshSessions(true);
        return false;
      }
      
      return false;
    } finally {
      setLoading(false);
    }
  };

  // Finalizar sess√£o atual (Sa√≠da)
  const endSession = async (): Promise<boolean> => {
    try {
      console.log('üèÅ SessionContext: Finalizando sess√£o...');
      setLoading(true);
      
      if (!currentSession) {
        console.log('‚ö†Ô∏è SessionContext: Nenhuma sess√£o ativa para finalizar');
        return false;
      }
      
      const endedSession = await sessionService.endSession(currentSession.id);
      console.log('‚úÖ SessionContext: Sess√£o finalizada:', endedSession);
      
      // Limpar sess√£o atual imediatamente
      setCurrentSession(null);
      
      // For√ßar atualiza√ß√£o imediata
      await refreshSessions(true);
      
      return true;
    } catch (error) {
      console.error('‚ùå SessionContext: Erro ao finalizar sess√£o:', error);
      // Mesmo com erro, tentar atualizar para sincronizar
      await refreshSessions(true);
      return false;
    } finally {
      setLoading(false);
    }
  };

  // Limpar sess√£o atual (√∫til para logout)
  const clearCurrentSession = () => {
    console.log('üßπ SessionContext: Limpando sess√£o atual');
    setCurrentSession(null);
  };

  // Obter registros de hoje
  const getTodayRecords = (): TimeRecord[] => {
    const today = new Date();
    const todayStr = today.toDateString();
    
    const todayRecords: TimeRecord[] = [];
    
    sessions.forEach(session => {
      const sessionDate = new Date(session.startTime).toDateString();
      if (sessionDate === todayStr) {
        todayRecords.push(...session.timeRecords);
      }
    });
    
    // Ordenar por timestamp
    return todayRecords.sort((a, b) => 
      new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime()
    );
  };

  // Carregar sess√µes na inicializa√ß√£o
  useEffect(() => {
    refreshSessions();
  }, []);

  const value: SessionContextType = {
    currentSession,
    sessions,
    loading,
    startSession,
    endSession,
    refreshSessions,
    getTodayRecords,
    clearCurrentSession,
  };

  return (
    <SessionContext.Provider value={value}>
      {children}
    </SessionContext.Provider>
  );
}
