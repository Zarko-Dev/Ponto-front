import api from './api';

export interface WorkSession {
  id: number;
  userId: number;
  startTime: string;
  endTime?: string;
  totalHours?: number;
  createdAt: string;
  timeRecords: TimeRecord[];
}

export interface TimeRecord {
  id: number;
  sessionId: number;
  recordType: 'ENTRADA' | 'SAIDA' | 'PAUSA_INICIO' | 'PAUSA_FIM';
  timestamp: string;
}

export interface SessionStats {
  totalSessions: number;
  totalHours: number;
  averageSessionDuration: number;
}

class SessionService {
  // Obter sess√µes do usu√°rio logado
  async getMySessions(): Promise<WorkSession[]> {
    try {
      console.log('üì° SessionService: Buscando sess√µes do usu√°rio...');
      const response = await api.get('/sessions/my');
      console.log('üì• SessionService: Sess√µes recebidas:', response.data.length);
      return response.data;
    } catch (error) {
      console.error('‚ùå SessionService: Erro ao buscar sess√µes:', error);
      throw error;
    }
  }

  // Iniciar uma nova sess√£o de trabalho
  async startSession(): Promise<WorkSession> {
    try {
      console.log('üì° SessionService: Iniciando nova sess√£o...');
      const response = await api.post('/sessions/start');
      console.log('‚úÖ SessionService: Sess√£o iniciada:', response.data);
      return response.data.data || response.data;
    } catch (error) {
      console.error('‚ùå SessionService: Erro ao iniciar sess√£o:', error);
      throw error;
    }
  }

  // Iniciar pausa em uma sess√£o
  async startPause(sessionId: number): Promise<TimeRecord> {
    try {
      console.log('üì° SessionService: Iniciando pausa na sess√£o:', sessionId);
      const response = await api.post(`/sessions/${sessionId}/pause/start`);
      console.log('‚úÖ SessionService: Pausa iniciada:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå SessionService: Erro ao iniciar pausa:', error);
      throw error;
    }
  }

  // Finalizar pausa em uma sess√£o
  async endPause(sessionId: number): Promise<TimeRecord> {
    try {
      console.log('üì° SessionService: Finalizando pausa na sess√£o:', sessionId);
      const response = await api.post(`/sessions/${sessionId}/pause/end`);
      console.log('‚úÖ SessionService: Pausa finalizada:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå SessionService: Erro ao finalizar pausa:', error);
      throw error;
    }
  }

  // Finalizar uma sess√£o de trabalho
  async endSession(sessionId: number): Promise<WorkSession> {
    try {
      console.log('üì° SessionService: Finalizando sess√£o:', sessionId);
      const response = await api.post(`/sessions/${sessionId}/end`);
      console.log('‚úÖ SessionService: Sess√£o finalizada:', response.data);
      return response.data.data || response.data;
    } catch (error) {
      console.error('‚ùå SessionService: Erro ao finalizar sess√£o:', error);
      throw error;
    }
  }

  // Obter sess√£o atual (em aberto) do usu√°rio
  async getCurrentSession(): Promise<WorkSession | null> {
    try {
      console.log('üì° SessionService: Buscando sess√£o atual...');
      const response = await api.get('/sessions/current');
      
      if (response.data.hasOpenSession) {
        console.log('‚úÖ SessionService: Sess√£o atual encontrada:', response.data.session.id);
        return response.data.session;
      } else {
        console.log('‚ÑπÔ∏è SessionService: Nenhuma sess√£o ativa encontrada');
        return null;
      }
    } catch (error) {
      console.error('‚ùå SessionService: Erro ao buscar sess√£o atual:', error);
      return null;
    }
  }

  // Calcular estat√≠sticas das sess√µes
  async getSessionStats(): Promise<SessionStats> {
    try {
      console.log('üì° SessionService: Buscando estat√≠sticas...');
      const response = await api.get('/sessions/stats');
      console.log('‚úÖ SessionService: Estat√≠sticas recebidas:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå SessionService: Erro ao buscar estat√≠sticas:', error);
      // Retornar valores padr√£o em caso de erro
      return {
        totalSessions: 0,
        totalHours: 0,
        averageSessionDuration: 0
      };
    }
  }
}

export default new SessionService();
